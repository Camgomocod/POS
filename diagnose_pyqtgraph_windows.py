#!/usr/bin/env python3
"""
Script de diagn√≥stico para PyQtGraph en Windows 11
Diagn√≥stica problemas espec√≠ficos con PyQtGraph despu√©s de la migraci√≥n
"""

import sys
import os

print("üîç DIAGN√ìSTICO PYQTGRAPH PARA WINDOWS 11")
print("=" * 50)

# 1. Verificar entorno b√°sico
print("1. Verificando entorno b√°sico...")
print(f"   Python: {sys.version}")
print(f"   Plataforma: {sys.platform}")

# 2. Probar PyQt5 b√°sico
print("\n2. Probando PyQt5 b√°sico...")
try:
    from PyQt5.QtWidgets import QApplication, QWidget
    from PyQt5.QtCore import Qt
    print("   ‚úÖ PyQt5 b√°sico funciona")
except Exception as e:
    print(f"   ‚ùå Error con PyQt5: {e}")
    sys.exit(1)

# 3. Probar imports individuales
print("\n3. Probando imports PyQtGraph...")
try:
    import pyqtgraph as pg
    print("   ‚úÖ pyqtgraph importado")
except Exception as e:
    print(f"   ‚ùå Error importando pyqtgraph: {e}")
    sys.exit(1)

try:
    from pyqtgraph import PlotWidget
    print("   ‚úÖ PlotWidget importado")
except Exception as e:
    print(f"   ‚ùå Error importando PlotWidget: {e}")
    sys.exit(1)

try:
    import numpy as np
    print("   ‚úÖ numpy importado")
except Exception as e:
    print(f"   ‚ùå Error importando numpy: {e}")

# 4. Probar configuraci√≥n de PyQtGraph
print("\n4. Probando configuraci√≥n PyQtGraph...")
try:
    pg.setConfigOption('background', 'w')
    pg.setConfigOption('foreground', 'k') 
    pg.setConfigOption('antialias', True)
    print("   ‚úÖ Configuraci√≥n PyQtGraph aplicada")
except Exception as e:
    print(f"   ‚ùå Error configurando PyQtGraph: {e}")

# 5. Probar creaci√≥n de QApplication
print("\n5. Probando QApplication...")
try:
    app = QApplication.instance()
    if app is None:
        app = QApplication(sys.argv)
    print("   ‚úÖ QApplication creada")
except Exception as e:
    print(f"   ‚ùå Error creando QApplication: {e}")
    sys.exit(1)

# 6. Probar creaci√≥n de PlotWidget
print("\n6. Probando PlotWidget...")
try:
    plot_widget = PlotWidget(title="Test Plot")
    print("   ‚úÖ PlotWidget creado")
except Exception as e:
    print(f"   ‚ùå Error creando PlotWidget: {e}")
    print(f"   Detalles: {str(e)}")
    import traceback
    traceback.print_exc()

# 7. Probar imports de reports_view
print("\n7. Probando imports espec√≠ficos de reports_view...")
try:
    from controllers.reports_controller import ReportsController
    print("   ‚úÖ ReportsController importado")
except Exception as e:
    print(f"   ‚ùå Error importando ReportsController: {e}")

try:
    from utils.colors import ColorPalette
    print("   ‚úÖ ColorPalette importado")
except Exception as e:
    print(f"   ‚ùå Error importando ColorPalette: {e}")

# 8. Probar import de reports_view completo
print("\n8. Probando import de ReportsView...")
try:
    # Temporalmente deshabilitar matplotlib si est√° configurado
    os.environ['DISABLE_MATPLOTLIB'] = '1'
    
    from views.reports_view import ReportsView
    print("   ‚úÖ ReportsView importado correctamente")
except Exception as e:
    print(f"   ‚ùå Error importando ReportsView: {e}")
    print(f"   Detalles: {str(e)}")
    import traceback
    traceback.print_exc()

# 9. Probar instanciaci√≥n de ReportsView
print("\n9. Probando creaci√≥n de ReportsView...")
try:
    reports_view = ReportsView()
    print("   ‚úÖ ReportsView instanciado correctamente")
    
    # Probar mostrar la vista
    reports_view.show()
    print("   ‚úÖ ReportsView mostrado")
    
    # Cerrar inmediatamente
    reports_view.close()
    print("   ‚úÖ ReportsView cerrado")
    
except Exception as e:
    print(f"   ‚ùå Error instanciando ReportsView: {e}")
    print(f"   Detalles: {str(e)}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 50)
print("üîç DIAGN√ìSTICO COMPLETADO")
print("Si hay errores arriba, esos son los problemas a resolver.")
