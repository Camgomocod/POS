@echo off
chcp 65001 >nul
title Diagn√≥stico Sistema POS - Windows 11
color 0E

echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë              DIAGN√ìSTICO COMPLETO - SISTEMA POS         ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

echo üîç Realizando diagn√≥stico completo...
echo.

REM Verificar ubicaci√≥n actual
echo üìç Ubicaci√≥n actual:
echo    %CD%
echo.

REM Verificar archivos principales
echo üìÅ Verificando archivos del proyecto:
if exist "main.py" (
    echo    ‚úÖ main.py encontrado
) else (
    echo    ‚ùå main.py NO encontrado
)

if exist "requirements.txt" (
    echo    ‚úÖ requirements.txt encontrado
) else (
    echo    ‚ùå requirements.txt NO encontrado
)

if exist "config.py" (
    echo    ‚úÖ config.py encontrado
) else (
    echo    ‚ö†Ô∏è  config.py no encontrado
)

echo.

REM Verificar Python
echo üêç Verificando Python:
python --version 2>nul
if errorlevel 1 (
    echo    ‚ùå Python NO est√° disponible
    echo    üí° Instalar Python desde python.org y marcar "Add to PATH"
) else (
    echo    ‚úÖ Python disponible
    python -c "import sys; print('    üìÇ Ejecutable:', sys.executable)"
    python -c "import sys; print('    üìã Versi√≥n:', sys.version.split()[0])"
)

echo.

REM Verificar entorno virtual
echo üè† Verificando entorno virtual:
if exist "venv" (
    echo    ‚úÖ Carpeta venv existe
    if exist "venv\Scripts\python.exe" (
        echo    ‚úÖ Python en venv disponible
    ) else (
        echo    ‚ùå Python en venv NO disponible
    )
    
    if exist "venv\Scripts\activate.bat" (
        echo    ‚úÖ Script de activaci√≥n existe
    ) else (
        echo    ‚ùå Script de activaci√≥n NO existe
    )
) else (
    echo    ‚ùå Entorno virtual NO existe
)

echo.

REM Probar activaci√≥n de entorno virtual
echo üöÄ Probando activaci√≥n de entorno virtual:
if exist "venv\Scripts\activate.bat" (
    call venv\Scripts\activate.bat >nul 2>&1
    if errorlevel 1 (
        echo    ‚ùå Error al activar entorno virtual
    ) else (
        echo    ‚úÖ Entorno virtual activado correctamente
        
        echo.
        echo üì¶ Verificando dependencias instaladas:
        python -c "import PyQt5; print('    ‚úÖ PyQt5:', PyQt5.Qt.QT_VERSION_STR)" 2>nul
        if errorlevel 1 (
            echo    ‚ùå PyQt5 NO est√° instalado
        )
        
        python -c "import sqlalchemy; print('    ‚úÖ SQLAlchemy:', sqlalchemy.__version__)" 2>nul
        if errorlevel 1 (
            echo    ‚ùå SQLAlchemy NO est√° instalado
        )
        
        python -c "import pandas; print('    ‚úÖ Pandas:', pandas.__version__)" 2>nul
        if errorlevel 1 (
            echo    ‚ùå Pandas NO est√° instalado
        )
    )
) else (
    echo    ‚ùå No se puede probar - entorno virtual no existe
)

echo.

REM Verificar base de datos
echo üóÑÔ∏è  Verificando base de datos:
if exist "data" (
    echo    ‚úÖ Carpeta data existe
    if exist "data\pos.db" (
        for %%A in ("data\pos.db") do echo    ‚úÖ Base de datos: %%~zA bytes
    ) else (
        echo    ‚ö†Ô∏è  Base de datos no existe (se crear√° autom√°ticamente)
    )
) else (
    echo    ‚ö†Ô∏è  Carpeta data no existe
)

echo.

REM Probar ejecuci√≥n b√°sica
echo üß™ Probando ejecuci√≥n b√°sica:
if exist "main.py" (
    if exist "venv\Scripts\activate.bat" (
        echo    üîÑ Probando importaciones b√°sicas...
        call venv\Scripts\activate.bat >nul 2>&1
        python -c "print('‚úÖ Python funciona')" 2>nul
        if errorlevel 1 (
            echo    ‚ùå Error en Python b√°sico
        ) else (
            python -c "import sys; print('‚úÖ Importaci√≥n b√°sica funciona')" 2>nul
            python -c "import os; print('‚úÖ M√≥dulos OS funcionan')" 2>nul
            
            echo    üîÑ Probando PyQt5...
            python -c "from PyQt5.QtWidgets import QApplication; print('‚úÖ PyQt5 importa correctamente')" 2>nul
            if errorlevel 1 (
                echo    ‚ùå PyQt5 no funciona correctamente
            ) else (
                echo    üîÑ Probando creaci√≥n de QApplication...
                python -c "import sys; from PyQt5.QtWidgets import QApplication; app = QApplication(sys.argv); print('‚úÖ QApplication se puede crear'); app.quit()" 2>nul
                if errorlevel 1 (
                    echo    ‚ùå No se puede crear QApplication (problema de entorno gr√°fico)
                ) else (
                    echo    ‚úÖ QApplication funciona correctamente
                )
            )
        )
    ) else (
        echo    ‚ùå No se puede probar - entorno virtual no disponible
    )
) else (
    echo    ‚ùå No se puede probar - main.py no encontrado
)

echo.

REM Verificar variables de entorno importantes
echo üåç Variables de entorno:
echo    DISPLAY=%DISPLAY%
echo    PATH contiene Python: 
python -c "import sys, os; print('    ‚úÖ S√≠' if any('python' in p.lower() for p in os.environ.get('PATH', '').split(';')) else '    ‚ùå No')" 2>nul

echo.

REM Diagn√≥stico de Windows
echo üñ•Ô∏è  Informaci√≥n del sistema:
echo    Sistema: %OS%
echo    Computadora: %COMPUTERNAME%
echo    Usuario: %USERNAME%

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                  RESUMEN DEL DIAGN√ìSTICO                ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

if not exist "main.py" (
    echo ‚ùå PROBLEMA CR√çTICO: Archivos del proyecto no encontrados
    echo üí° Soluci√≥n: Verificar que est√°s en la carpeta correcta del proyecto
    echo.
)

if not exist "venv" (
    echo ‚ùå PROBLEMA CR√çTICO: Entorno virtual no existe
    echo üí° Soluci√≥n: Ejecutar install_pos_simple.bat
    echo.
)

python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå PROBLEMA CR√çTICO: Python no est√° disponible
    echo üí° Soluci√≥n: Instalar Python desde python.org y marcar "Add to PATH"
    echo.
)

echo üìã Pr√≥ximos pasos recomendados:
echo.
echo    1. Si Python no est√° disponible: Instalar Python
echo    2. Si faltan archivos: Verificar ubicaci√≥n del proyecto  
echo    3. Si no hay entorno virtual: Ejecutar install_pos_simple.bat
echo    4. Si PyQt5 falla: Problema de entorno gr√°fico de Windows
echo.

pause
