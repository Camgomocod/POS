"""
Script para regenerar la base de datos con datos sint√©ticos limpios
Respeta todas las correcciones aplicadas y el dise√±o actual de modelos
"""
import os
import sys
import sqlite3
from datetime import datetime, timedelta
import random
from decimal import Decimal

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models.base import get_db, engine, Base
from models.user import User, UserRole
from models.category import Category
from models.product import Product
from models.order import Order, OrderStatus
from models.order_item import OrderItem

def delete_existing_database():
    """Eliminar base de datos existente si existe"""
    db_path = "data/pos.db"
    if os.path.exists(db_path):
        os.remove(db_path)
        print("üóëÔ∏è Base de datos anterior eliminada")
    
    # Tambi√©n eliminar archivos relacionados
    for file in ["data/pos.db-shm", "data/pos.db-wal", "data/pos_backup.db"]:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è Archivo {file} eliminado")

def create_fresh_database():
    """Crear estructura de base de datos limpia"""
    print("üèóÔ∏è Creando estructura de base de datos...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Estructura de base de datos creada")

def create_users():
    """Crear usuarios del sistema"""
    print("üë• Creando usuarios...")
    db = get_db()
    
    users = [
        User(
            username="admin",
            password="admin123",
            full_name="Administrador Principal",
            email="admin@pos.com",
            role=UserRole.ADMIN
        ),
        User(
            username="cajero1",
            password="cajero123",
            full_name="Mar√≠a Gonz√°lez",
            email="maria@pos.com",
            role=UserRole.REGULAR
        ),
        User(
            username="cajero2",
            password="cajero123",
            full_name="Carlos Mart√≠nez",
            email="carlos@pos.com",
            role=UserRole.REGULAR
        )
    ]
    
    for user in users:
        db.add(user)
    
    db.commit()
    print(f"‚úÖ {len(users)} usuarios creados")
    return users

def create_categories():
    """Crear categor√≠as de productos"""
    print("üìÇ Creando categor√≠as...")
    db = get_db()
    
    categories = [
        Category(name="Bebidas", description="Bebidas fr√≠as y calientes"),
        Category(name="Comida R√°pida", description="Hamburguesas, hot dogs, etc."),
        Category(name="Postres", description="Dulces y postres"),
        Category(name="Ensaladas", description="Ensaladas frescas"),
        Category(name="Caf√©", description="Caf√© y bebidas calientes"),
        Category(name="Snacks", description="Aperitivos y bocadillos")
    ]
    
    for category in categories:
        db.add(category)
    
    db.commit()
    print(f"‚úÖ {len(categories)} categor√≠as creadas")
    return categories

def create_products(categories):
    """Crear productos por categor√≠a"""
    print("üçî Creando productos...")
    db = get_db()
    
    # Refrescar categor√≠as en la sesi√≥n actual
    categories = db.query(Category).all()
    
    products_data = {
        "Bebidas": [
            ("Coca Cola", "Refresco de cola 350ml", 2.50, 1.20),
            ("Pepsi", "Refresco de cola 350ml", 2.50, 1.20),
            ("Sprite", "Refresco de lim√≥n 350ml", 2.50, 1.20),
            ("Agua Mineral", "Agua embotellada 500ml", 1.50, 0.80),
            ("Jugo de Naranja", "Jugo natural de naranja 250ml", 3.00, 1.50),
            ("T√© Helado", "T√© fr√≠o con lim√≥n 400ml", 2.80, 1.40)
        ],
        "Comida R√°pida": [
            ("Hamburguesa Cl√°sica", "Carne, lechuga, tomate, cebolla", 8.50, 4.20),
            ("Hamburguesa Doble", "Doble carne con queso", 12.00, 6.00),
            ("Hot Dog", "Salchicha con mostaza y ketchup", 5.50, 2.80),
            ("Papas Fritas", "Papas fritas medianas", 4.00, 2.00),
            ("Nuggets de Pollo", "8 piezas con salsa", 7.50, 3.80),
            ("Sandwich Club", "Pollo, tocino, lechuga, tomate", 9.00, 4.50)
        ],
        "Postres": [
            ("Helado de Vainilla", "Copa de helado con topping", 4.50, 2.20),
            ("Brownie", "Brownie de chocolate caliente", 5.00, 2.50),
            ("Cheesecake", "Rebanada de cheesecake", 6.00, 3.00),
            ("Flan", "Flan casero con caramelo", 4.00, 2.00),
            ("Tiramis√∫", "Postre italiano", 7.00, 3.50),
            ("Sundae", "Helado con frutas y crema", 5.50, 2.80)
        ],
        "Ensaladas": [
            ("Ensalada C√©sar", "Lechuga, pollo, crutones, aderezo", 7.50, 3.80),
            ("Ensalada Griega", "Tomate, pepino, queso feta, aceitunas", 6.50, 3.20),
            ("Ensalada Mixta", "Lechuga, tomate, zanahoria, ma√≠z", 5.50, 2.80),
            ("Ensalada de At√∫n", "At√∫n, lechuga, huevo, tomate", 8.00, 4.00)
        ],
        "Caf√©": [
            ("Caf√© Americano", "Caf√© negro tradicional", 2.00, 0.80),
            ("Caf√© con Leche", "Caf√© con leche vaporizada", 2.80, 1.20),
            ("Cappuccino", "Caf√© con leche espumosa", 3.50, 1.60),
            ("Latte", "Caf√© con mucha leche", 4.00, 1.80),
            ("Espresso", "Caf√© concentrado", 2.50, 1.00),
            ("Mocha", "Caf√© con chocolate", 4.50, 2.00)
        ],
        "Snacks": [
            ("Nachos", "Chips con queso derretido", 5.00, 2.50),
            ("Alitas de Pollo", "6 alitas picantes", 8.00, 4.00),
            ("Quesadilla", "Tortilla con queso", 6.00, 3.00),
            ("Empanadas", "2 empanadas de carne", 4.50, 2.20),
            ("Teque√±os", "6 teque√±os con queso", 5.50, 2.80)
        ]
    }
    
    products = []
    for category in categories:
        if category.name in products_data:
            for name, desc, price, cost in products_data[category.name]:
                product = Product(
                    name=name,
                    description=desc,
                    price=Decimal(str(price)),
                    cost=Decimal(str(cost)),
                    category_id=category.id,
                    is_active=True,
                    stock=random.randint(50, 200)
                )
                products.append(product)
                db.add(product)
    
    db.commit()
    print(f"‚úÖ {len(products)} productos creados")
    return products

def create_sample_orders(products):
    """Crear √≥rdenes de ejemplo con diferentes estados"""
    print("üßæ Creando √≥rdenes de ejemplo...")
    db = get_db()
    
    # Refrescar productos en la sesi√≥n actual
    products = db.query(Product).all()
    
    # Nombres de clientes ejemplo
    customers = [
        "Juan P√©rez", "Mar√≠a Garc√≠a", "Carlos L√≥pez", "Ana Mart√≠nez",
        "Luis Rodr√≠guez", "Carmen S√°nchez", "Miguel Torres", "Laura Ruiz",
        "Fernando Castro", "Isabel Moreno", "Roberto Silva", "Patricia D√≠az",
        "Andr√©s Herrera", "Rosa Jim√©nez", "Manuel Vargas", "Elena Ramos"
    ]
    
    orders = []
    
    # Crear √≥rdenes de los √∫ltimos 7 d√≠as
    for day_offset in range(7):
        base_date = datetime.now() - timedelta(days=day_offset)
        
        # N√∫mero de √≥rdenes por d√≠a (m√°s recientes tienen m√°s)
        orders_per_day = random.randint(8, 15) if day_offset < 2 else random.randint(3, 8)
        
        for _ in range(orders_per_day):
            # Hora aleatoria del d√≠a
            hour = random.randint(8, 22)
            minute = random.randint(0, 59)
            order_time = base_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            # Estado basado en la antig√ºedad de la orden
            if day_offset == 0:  # Hoy
                status_weights = [
                    (OrderStatus.PENDING.value, 0.1),
                    (OrderStatus.PREPARING.value, 0.2),
                    (OrderStatus.READY.value, 0.1),
                    (OrderStatus.DELIVERED.value, 0.3),
                    (OrderStatus.PAID.value, 0.3)
                ]
            elif day_offset <= 2:  # √öltimos 2 d√≠as
                status_weights = [
                    (OrderStatus.DELIVERED.value, 0.2),
                    (OrderStatus.PAID.value, 0.8)
                ]
            else:  # D√≠as anteriores - mayor√≠a pagadas
                status_weights = [
                    (OrderStatus.DELIVERED.value, 0.1),
                    (OrderStatus.PAID.value, 0.9)
                ]
            
            # Seleccionar estado basado en pesos
            status = random.choices(
                [s[0] for s in status_weights],
                weights=[s[1] for s in status_weights]
            )[0]
            
            # Crear orden
            order = Order(
                customer_name=random.choice(customers),
                table_number=random.choice([None, None, random.randint(1, 20)]),  # 2/3 para llevar
                status=status,
                created_at=order_time,
                updated_at=order_time + timedelta(minutes=random.randint(5, 45)),
                payment_method=random.choice(["efectivo", "tarjeta", "transferencia"]) if status == OrderStatus.PAID.value else None
            )
            
            # Agregar items a la orden (1-4 productos)
            num_items = random.randint(1, 4)
            selected_products = random.sample(products, num_items)
            order_total = 0
            
            for product in selected_products:
                quantity = random.randint(1, 3)
                unit_price = float(product.price)
                subtotal = quantity * unit_price
                order_total += subtotal
                
                order_item = OrderItem(
                    product_id=product.id,
                    quantity=quantity,
                    unit_price=unit_price,
                    subtotal=subtotal
                )
                order.items.append(order_item)
            
            order.total = order_total
            orders.append(order)
            db.add(order)
    
    db.commit()
    print(f"‚úÖ {len(orders)} √≥rdenes creadas")
    
    # Estad√≠sticas por estado
    status_counts = {}
    for order in orders:
        status_counts[order.status] = status_counts.get(order.status, 0) + 1
    
    print("üìä Estad√≠sticas de √≥rdenes:")
    for status, count in status_counts.items():
        print(f"   {status}: {count} √≥rdenes")
    
    return orders

def verify_data_integrity():
    """Verificar integridad de los datos creados"""
    print("üîç Verificando integridad de datos...")
    db = get_db()
    
    # Verificar usuarios
    users = db.query(User).all()
    print(f"‚úÖ Usuarios: {len(users)}")
    for user in users:
        print(f"   - {user.username} ({user.role.value}) - {user.full_name}")
    
    # Verificar categor√≠as y productos
    categories = db.query(Category).all()
    print(f"‚úÖ Categor√≠as: {len(categories)}")
    for category in categories:
        product_count = db.query(Product).filter(Product.category_id == category.id).count()
        print(f"   - {category.name}: {product_count} productos")
    
    # Verificar √≥rdenes
    orders = db.query(Order).all()
    print(f"‚úÖ √ìrdenes totales: {len(orders)}")
    
    # Verificar por estado usando los valores string correctos
    for status in OrderStatus:
        count = db.query(Order).filter(Order.status == status.value).count()
        print(f"   - {status.name}: {count} √≥rdenes")
    
    # Verificar √≥rdenes pagadas para payment_history
    paid_orders = db.query(Order).filter(Order.status == OrderStatus.PAID.value).all()
    print(f"‚úÖ √ìrdenes pagadas (para historial): {len(paid_orders)}")
    
    # Verificar √≥rdenes para cocina (√∫ltimos 3 d√≠as)
    from datetime import date
    start_date = date.today() - timedelta(days=3)
    start_datetime = datetime.combine(start_date, datetime.min.time())
    kitchen_orders = db.query(Order).filter(
        Order.status.in_([
            OrderStatus.PENDING.value, OrderStatus.PREPARING.value, 
            OrderStatus.READY.value, OrderStatus.DELIVERED.value, 
            OrderStatus.PAID.value
        ]),
        Order.created_at >= start_datetime
    ).all()
    print(f"‚úÖ √ìrdenes para cocina (√∫ltimos 3 d√≠as): {len(kitchen_orders)}")

def main():
    """Funci√≥n principal para regenerar la base de datos"""
    print("üöÄ REGENERANDO BASE DE DATOS CON DATOS SINT√âTICOS")
    print("=" * 50)
    
    try:
        # Paso 1: Eliminar base de datos existente
        delete_existing_database()
        
        # Paso 2: Crear estructura limpia
        create_fresh_database()
        
        # Paso 3: Crear datos base
        users = create_users()
        categories = create_categories()
        products = create_products(None)  # No necesita par√°metro
        orders = create_sample_orders(None)  # No necesita par√°metro
        
        # Paso 4: Verificar integridad
        verify_data_integrity()
        
        print("=" * 50)
        print("‚úÖ BASE DE DATOS REGENERADA EXITOSAMENTE")
        print("\nCredenciales de acceso:")
        print("üë§ Admin: usuario='admin', contrase√±a='admin123'")
        print("üë§ Cajero1: usuario='cajero1', contrase√±a='cajero123'")
        print("üë§ Cajero2: usuario='cajero2', contrase√±a='cajero123'")
        print("\nLa base de datos contiene:")
        print("- Usuarios con roles correctos")
        print("- Categor√≠as y productos variados")
        print("- √ìrdenes de los √∫ltimos 7 d√≠as con estados realistas")
        print("- Datos compatible con todas las correcciones aplicadas")
        
    except Exception as e:
        print(f"‚ùå Error durante la regeneraci√≥n: {e}")
        raise

if __name__ == "__main__":
    main()
